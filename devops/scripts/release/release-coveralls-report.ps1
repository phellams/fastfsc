# Codecov Coverage Report (Note: This script is for Coveralls, not Codecov)

#---CONFIG----------------------------
# Define the expected name of the Coveralls executable.
# It's good practice to be explicit about the executable name.
$coveralls = "coveralls"

# Path to your coverage report file.
# IMPORTANT: Replace 'path/to/your/coverage/report.xml' with the actual path
# to the XML coverage report generated by your test runner (e.g., Coverlet, OpenCover).
# This is crucial for Coveralls to parse your coverage data.
$coverageReportFilePath = "./coverage.xml"
#---CONFIG----------------------------

#------------------------------------
[console]::writeline("--- Starting Coveralls Coverage Report Upload ---")
# 1. Verify Coveralls executable exists in PATH
# Get-Command is more robust for checking if an executable is truly available.
# Using -ErrorAction Stop ensures immediate termination on failure.
try {
    $coverallsCommand = Get-Command $coveralls -ErrorAction Stop
    [console]::writeline("Found Coveralls executable: $($coverallsCommand.Source)")
}
catch {
    [console]::writeline("Error: Unable to find '$coveralls' in your system's PATH. Please ensure it's installed and accessible.`n")
    exit 1
}

# 2. Verify the coverage report file exists
if (!(Test-Path $coverageReportFilePath)) {
    [console]::writeline("Error: Coverage report file not found at '$coverageReportFilePath'. Please ensure your test runner generated it correctly.`n")
    exit 1 
}

[console]::writeline("Found coverage report file: $coverageReportFilePath")
# 3. Verify the repository token environment variable is set
if ([string]::IsNullOrWhiteSpace("$env:coveralls_repo_token_$Modulename")) {
    throw [System.Exception]::new("Error: COVERALLS_REPO_TOKEN_COMMITFUSION environment variable is not set or is empty. This token is required for Coveralls upload.")
}

[console]::writeline("Coveralls repository token environment variable found.")
# 4. Execute the Coveralls report command

[console]::writeline("Executing Coveralls upload command...")
try {
    # It's good practice to explicitly include the coverage file,
    # as Coveralls needs to know where to find the data.
    # The exact argument for specifying the coverage file might vary based on the
    # Coveralls.NET or other Coveralls client you are using.
    # Common arguments are --input, --lcov, --xml, etc.
    # You might need to adjust `--input $coverageReportFilePath` based on your Coveralls CLI version and report format.
    # For .NET, it's often `--opencover` if using OpenCover XML, or `--input` for a general XML.
    # A common approach for .NET projects is to specify the path to a Cobertura or OpenCover XML.

    # Example: Assuming it accepts an input file or detects common files
    # If using Coveralls.NET (https://github.com/tonerdo/coveralls.net), it often scans or you pass --opencover
    # Let's use a generic approach, you might need to find the correct argument for your specific Coveralls client.
    # A very common one is --opencover or --lcov or --xml for specific formats.
    # Let's assume a generic --input, but be prepared to adjust this.

    # Option 1: Generic --input (might depend on specific Coveralls client capabilities)
    # & $coverallsExe report --repo-token=$ENV:COVERALLS_REPO_TOKEN_COMMITFUSION --input $coverageReportFilePath

    # Option 2: If it's a .NET/OpenCover/Cobertura scenario, it might be implicitly detected or need specific flags:
    # Example for Coveralls.NET with OpenCover:
    & $coveralls report --repo-token=$env:coveralls_repo_token_$ModuleName --opencover $coverageReportFilePath

    # Or if your test runner produces Cobertura XML:
    # & $coverallsExe report --repo-token=$ENV:COVERALLS_REPO_TOKEN_COMMITFUSION --cobertura $coverageReportFilePath

    [console]::writeline("Coveralls upload command executed successfully.")
}
catch {
    throw [System.Exception]::new("Error during Coveralls upload: $($_.Exception.Message)")
}

[console]::writeline("--- Coveralls Coverage Report Upload Completed ---")